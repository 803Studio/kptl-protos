syntax = "proto3";

option java_multiple_files = true;
option java_package="com.kptl.proto";
option go_package="./job";

package job;

message FindJobRequest {
  int32 id = 1;
  int32 role = 2;
  int32 byId = 3;
  int32 index = 4;
  int32 size = 5;
}

message FindJobByNameRequest {
  string jobName = 1;
  int32 index = 2;
  int32 size = 3;
}

message FindJobByIdRequest {
  int32 jobId = 1;
}

message FindAllJobRequest {
  int32 index = 1;
  int32 size = 2;
}

message FindJobResponse {
  ResponseHeader header = 1;
  repeated JobMessage jobMsg = 2;
}

message FindSimplifyJobResponse {
  ResponseHeader header = 1;
  repeated JobSimplifyMessage jobMsg = 2;
}


message SaveJobResponse {
  ResponseHeader header = 1;
}

message ResponseHeader {
  ResponseStatus status = 1;
  string message = 2;
}

message RegisteredCompanyReq {
  Company company = 1;
}

message Company {
  int32 id = 1;                         //id
  string companyName = 2;               //公司名称
  string companyLocation = 3;           //地址
  int32 isVip = 4;                      //是否会员
  int32 isCertified = 5;                //是否认证
  int64 registerTime = 6;               //注册时间
  int64 updateTime = 7;                 //刷新时间
  string industry = 8;                   //行业
  int32 companyId = 9;                   //公司id
}

message CommonCompanyReq {
  int32 id = 1;
}

message CommonResponse {
  ResponseHeader header = 1;
}

enum JobMoneyType {
  F2F = 0;
  DAY = 1;
  MON = 2;
  TIME = 3;
  HOUR = 4;
}

message JobMoney {
  JobMoneyType type = 1;
  low = 2;
  high = 3;
}

message JobMessage {
  int32 jobId = 1;                        //职位id
  string jobName = 2;                     //职位名称
  string jobReq = 3;                      //职位要求
  string jobLocation = 4;                 //职位地址
  string jobTags = 5;                    //职位标签
  int32 jobNeed = 6;                     //招聘人数
  JobMoney JobMoney = 7;
  string industry = 8;                   //行业
  int32 companyId = 9;                    //公司id(用户id)
  string recruiterName = 10;               //招聘者
  string recruiterPhone = 11;              //招聘者手机号
  int32 recruiterId = 12;                 //招聘者id
  int64 openTime = 13;                    //职位发布时间
  int64 updateTime = 14;                  //职位刷新时间
  string companyName = 15;
}

message JobSimplifyMessage {
  int32 jobId = 1;
  string jobName = 2;                     //职位名称
  string jobLocation = 3;                 //职位地址
  string companyName = 4;
  string jobTags = 5;                    //职位标签
  int32 companyId = 6;
  int64 openTime = 7;                    //职位发布时间
  JobMoney jobMoney = 8;
}

//错误码
enum ResponseStatus {
  OK = 0;
  InternalErr = 1;
}
message FindCompanyByNameReq {
  string name = 1;
  int32 index = 2;
  int32 size = 3;
}

message FindAllCompaniesReq {
  int32 index = 1;
  int32 size = 2;
}

message CommonCompanyResponse {
  ResponseHeader header = 1;
  repeated Company companies = 2;
}

message FindCompanyByIdResponse {
  ResponseHeader header = 1;
  Company company = 2;
}
//定义员工服务
service Job {
  rpc FindAllJobs(FindAllJobRequest) returns (FindJobResponse) {};        //查询所有职位，所有人都能查
  rpc FindJobByName(FindJobByNameRequest) returns (FindJobResponse) {};   //根据职位名称模糊查询
  rpc FindJobById(FindJobByIdRequest) returns (FindJobResponse) {};       //根据职位id查询
  rpc FindJobs(FindJobRequest) returns (FindJobResponse) {};              //根据角色不同查询
  rpc SaveJobs(JobMessage) returns (SaveJobResponse) {};                  //新建职位
  rpc FindJobsSimplify(FindAllJobRequest) returns (FindSimplifyJobResponse);   //职位简洁信息
  rpc UpdateJobs(JobMessage) returns (SaveJobResponse) {};                //更新职位
  rpc RegisteredCompany(Company) returns (CommonResponse) {};             //注册公司
  rpc UpdateCompany(RegisteredCompanyReq) returns (CommonResponse) {};    //更新公司信息
  rpc FindCompanyByName(FindCompanyByNameReq) returns (CommonCompanyResponse) {};
  rpc FindCompanyById(CommonCompanyReq) returns (FindCompanyByIdResponse) {};
  rpc FindAllCompanies(FindAllCompaniesReq) returns (CommonCompanyResponse) {};
  rpc BoundCompany(CommonCompanyReq) returns (CommonResponse) {};          //绑定公司
  rpc VerifyCompany(CommonCompanyReq) returns (CommonResponse) {};          //审核公司
}
